//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Roitberg Lab\source\repos\ClassLibrary2\ClassLibrary2\XYZ.g4 by ANTLR 4.6.4

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ClassLibrary2 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public partial class XYZParser : Parser {
	public const int
		DIGIT=1, FLOAT=2, ELEMENT=3, WORD=4, WHITESPACE=5, NEWLINE=6;
	public const int
		RULE_file = 0, RULE_frame = 1, RULE_comment = 2, RULE_line = 3, RULE_header = 4;
	public static readonly string[] ruleNames = {
		"file", "frame", "comment", "line", "header"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "DIGIT", "FLOAT", "ELEMENT", "WORD", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "XYZ.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public XYZParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class FileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(XYZParser.Eof, 0); }
		public FrameContext[] frame() {
			return GetRuleContexts<FrameContext>();
		}
		public FrameContext frame(int i) {
			return GetRuleContext<FrameContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXYZListener typedListener = listener as IXYZListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXYZListener typedListener = listener as IXYZListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXYZVisitor<TResult> typedVisitor = visitor as IXYZVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 10; frame();
				}
				}
				State = 13;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==DIGIT );
			State = 15; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameContext : ParserRuleContext {
		public HeaderContext header() {
			return GetRuleContext<HeaderContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public FrameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXYZListener typedListener = listener as IXYZListener;
			if (typedListener != null) typedListener.EnterFrame(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXYZListener typedListener = listener as IXYZListener;
			if (typedListener != null) typedListener.ExitFrame(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXYZVisitor<TResult> typedVisitor = visitor as IXYZVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrameContext frame() {
		FrameContext _localctx = new FrameContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_frame);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17; header();
			State = 19;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 18; comment();
				}
				break;
			}
			State = 22;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 21; line();
				}
				}
				State = 24;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==ELEMENT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(XYZParser.NEWLINE, 0); }
		public ITerminalNode ELEMENT() { return GetToken(XYZParser.ELEMENT, 0); }
		public ITerminalNode[] WORD() { return GetTokens(XYZParser.WORD); }
		public ITerminalNode WORD(int i) {
			return GetToken(XYZParser.WORD, i);
		}
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXYZListener typedListener = listener as IXYZListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXYZListener typedListener = listener as IXYZListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXYZVisitor<TResult> typedVisitor = visitor as IXYZVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_comment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ELEMENT:
				{
				State = 26; Match(ELEMENT);
				}
				break;
			case WORD:
				{
				State = 28;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 27; Match(WORD);
					}
					}
					State = 30;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==WORD );
				}
				break;
			case NEWLINE:
				break;
			default:
				break;
			}
			State = 34; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public ITerminalNode ELEMENT() { return GetToken(XYZParser.ELEMENT, 0); }
		public ITerminalNode[] FLOAT() { return GetTokens(XYZParser.FLOAT); }
		public ITerminalNode FLOAT(int i) {
			return GetToken(XYZParser.FLOAT, i);
		}
		public ITerminalNode NEWLINE() { return GetToken(XYZParser.NEWLINE, 0); }
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXYZListener typedListener = listener as IXYZListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXYZListener typedListener = listener as IXYZListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXYZVisitor<TResult> typedVisitor = visitor as IXYZVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_line);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; Match(ELEMENT);
			State = 37; Match(FLOAT);
			State = 38; Match(FLOAT);
			State = 39; Match(FLOAT);
			State = 40; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeaderContext : ParserRuleContext {
		public ITerminalNode DIGIT() { return GetToken(XYZParser.DIGIT, 0); }
		public ITerminalNode NEWLINE() { return GetToken(XYZParser.NEWLINE, 0); }
		public HeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_header; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXYZListener typedListener = listener as IXYZListener;
			if (typedListener != null) typedListener.EnterHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXYZListener typedListener = listener as IXYZListener;
			if (typedListener != null) typedListener.ExitHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXYZVisitor<TResult> typedVisitor = visitor as IXYZVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeaderContext header() {
		HeaderContext _localctx = new HeaderContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_header);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; Match(DIGIT);
			State = 43; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\b\x30\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x3\x2\x6\x2\xE\n\x2\r\x2"+
		"\xE\x2\xF\x3\x2\x3\x2\x3\x3\x3\x3\x5\x3\x16\n\x3\x3\x3\x6\x3\x19\n\x3"+
		"\r\x3\xE\x3\x1A\x3\x4\x3\x4\x6\x4\x1F\n\x4\r\x4\xE\x4 \x5\x4#\n\x4\x3"+
		"\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x2\x2\x2\a\x2\x2\x4\x2\x6\x2\b\x2\n\x2\x2\x2\x30\x2\r\x3\x2\x2\x2\x4"+
		"\x13\x3\x2\x2\x2\x6\"\x3\x2\x2\x2\b&\x3\x2\x2\x2\n,\x3\x2\x2\x2\f\xE\x5"+
		"\x4\x3\x2\r\f\x3\x2\x2\x2\xE\xF\x3\x2\x2\x2\xF\r\x3\x2\x2\x2\xF\x10\x3"+
		"\x2\x2\x2\x10\x11\x3\x2\x2\x2\x11\x12\a\x2\x2\x3\x12\x3\x3\x2\x2\x2\x13"+
		"\x15\x5\n\x6\x2\x14\x16\x5\x6\x4\x2\x15\x14\x3\x2\x2\x2\x15\x16\x3\x2"+
		"\x2\x2\x16\x18\x3\x2\x2\x2\x17\x19\x5\b\x5\x2\x18\x17\x3\x2\x2\x2\x19"+
		"\x1A\x3\x2\x2\x2\x1A\x18\x3\x2\x2\x2\x1A\x1B\x3\x2\x2\x2\x1B\x5\x3\x2"+
		"\x2\x2\x1C#\a\x5\x2\x2\x1D\x1F\a\x6\x2\x2\x1E\x1D\x3\x2\x2\x2\x1F \x3"+
		"\x2\x2\x2 \x1E\x3\x2\x2\x2 !\x3\x2\x2\x2!#\x3\x2\x2\x2\"\x1C\x3\x2\x2"+
		"\x2\"\x1E\x3\x2\x2\x2\"#\x3\x2\x2\x2#$\x3\x2\x2\x2$%\a\b\x2\x2%\a\x3\x2"+
		"\x2\x2&\'\a\x5\x2\x2\'(\a\x4\x2\x2()\a\x4\x2\x2)*\a\x4\x2\x2*+\a\b\x2"+
		"\x2+\t\x3\x2\x2\x2,-\a\x3\x2\x2-.\a\b\x2\x2.\v\x3\x2\x2\x2\a\xF\x15\x1A"+
		" \"";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ClassLibrary2
