//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Roitberg Lab\source\repos\ClassLibrary2\ClassLibrary2\XYZ.g4 by ANTLR 4.6.4

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ClassLibrary2 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public partial class XYZLexer : Lexer {
	public const int
		DIGIT=1, FLOAT=2, ELEMENT=3, WORD=4, WHITESPACE=5, NEWLINE=6;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LOWERCASE", "UPPERCASE", "NUMBER", "DIGIT", "FLOAT", "ELEMENT", "WORD", 
		"WHITESPACE", "NEWLINE"
	};


	public XYZLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "DIGIT", "FLOAT", "ELEMENT", "WORD", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "XYZ.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\b\x42\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x6\x4\x1B\n\x4\r\x4\xE\x4"+
		"\x1C\x3\x5\x6\x5 \n\x5\r\x5\xE\x5!\x3\x6\x5\x6%\n\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\a\x3\a\x3\b\x3\b\x6\b/\n\b\r\b\xE\b\x30\x3\t\x6\t\x34\n\t\r"+
		"\t\xE\t\x35\x3\t\x3\t\x3\n\x5\n;\n\n\x3\n\x3\n\x6\n?\n\n\r\n\xE\n@\x2"+
		"\x2\x2\v\x3\x2\x2\x5\x2\x2\a\x2\x2\t\x2\x3\v\x2\x4\r\x2\x5\xF\x2\x6\x11"+
		"\x2\a\x13\x2\b\x3\x2\x6\x3\x2\x63|\x3\x2\x43\\\x3\x2\x32;\x4\x2\v\v\""+
		"\"G\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2"+
		"\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x3\x15\x3\x2\x2\x2\x5\x17\x3"+
		"\x2\x2\x2\a\x1A\x3\x2\x2\x2\t\x1F\x3\x2\x2\x2\v$\x3\x2\x2\x2\r*\x3\x2"+
		"\x2\x2\xF.\x3\x2\x2\x2\x11\x33\x3\x2\x2\x2\x13>\x3\x2\x2\x2\x15\x16\t"+
		"\x2\x2\x2\x16\x4\x3\x2\x2\x2\x17\x18\t\x3\x2\x2\x18\x6\x3\x2\x2\x2\x19"+
		"\x1B\t\x4\x2\x2\x1A\x19\x3\x2\x2\x2\x1B\x1C\x3\x2\x2\x2\x1C\x1A\x3\x2"+
		"\x2\x2\x1C\x1D\x3\x2\x2\x2\x1D\b\x3\x2\x2\x2\x1E \x4\x32;\x2\x1F\x1E\x3"+
		"\x2\x2\x2 !\x3\x2\x2\x2!\x1F\x3\x2\x2\x2!\"\x3\x2\x2\x2\"\n\x3\x2\x2\x2"+
		"#%\a/\x2\x2$#\x3\x2\x2\x2$%\x3\x2\x2\x2%&\x3\x2\x2\x2&\'\x5\a\x4\x2\'"+
		"(\a\x30\x2\x2()\x5\a\x4\x2)\f\x3\x2\x2\x2*+\x4\x43\\\x2+\xE\x3\x2\x2\x2"+
		",/\x5\x3\x2\x2-/\x5\x5\x3\x2.,\x3\x2\x2\x2.-\x3\x2\x2\x2/\x30\x3\x2\x2"+
		"\x2\x30.\x3\x2\x2\x2\x30\x31\x3\x2\x2\x2\x31\x10\x3\x2\x2\x2\x32\x34\t"+
		"\x5\x2\x2\x33\x32\x3\x2\x2\x2\x34\x35\x3\x2\x2\x2\x35\x33\x3\x2\x2\x2"+
		"\x35\x36\x3\x2\x2\x2\x36\x37\x3\x2\x2\x2\x37\x38\b\t\x2\x2\x38\x12\x3"+
		"\x2\x2\x2\x39;\a\xF\x2\x2:\x39\x3\x2\x2\x2:;\x3\x2\x2\x2;<\x3\x2\x2\x2"+
		"<?\a\f\x2\x2=?\a\xF\x2\x2>:\x3\x2\x2\x2>=\x3\x2\x2\x2?@\x3\x2\x2\x2@>"+
		"\x3\x2\x2\x2@\x41\x3\x2\x2\x2\x41\x14\x3\x2\x2\x2\f\x2\x1C!$.\x30\x35"+
		":>@\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ClassLibrary2
